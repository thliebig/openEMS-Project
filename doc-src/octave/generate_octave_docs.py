import subprocess
import pathlib
import os

def get_octave_helptext(cwd, funcname):
    # Arbitrary Octave code execution is possible via filename injection.
    # We assume all files committed into the project tree are non-malicious,
    # so never use it with untrusted files!
    retval = subprocess.run(
        ["octave", "--eval", "display(get_help_text('%s'));" % funcname],
        cwd=cwd,
        capture_output=True
    )
    retval.check_returncode()
    return retval.stdout.decode("UTF-8")


def modify_helptext(helptext):
    helptext_lines = helptext.split("\n")

    # all raw docstrings have 1 leading space, remove them
    for idx, line in enumerate(helptext_lines):
        if line and line[0] == ' ':
            helptext_lines[idx] = line[1:]

        if (
            "openEMS matlab/octave interface" in line or
            "openEMS matlab interface" in line or
            "openEMS Matlab/Octave interface" in line or
            "CSXCAD matlab interface" in line
        ):
            helptext_lines[idx] = "\n"

    func_prototype = helptext_lines[0]
    rest = "\n".join(helptext_lines[1:])
    return func_prototype, rest


def generate_doc(subproject):
    cwd = "../../%s/matlab/" % subproject
    files = pathlib.Path(cwd).glob("*.m")

    count = 0
    for f in files:
        funcname = f.with_suffix("").name
        out_fn = "./autogenerated/%s/%s.md" % (subproject, funcname)
        # check if we can skip converting a file
        if pathlib.Path(out_fn).is_file() and os.path.getmtime(out_fn) > os.path.getmtime(f):
            print("Skipping %s..." % funcname)
            count += 1
            continue
        print("Converting %s..." % funcname)
        text = get_octave_helptext(cwd, funcname)

        func_usage, rest = modify_helptext(text)
        func_usage = func_usage.lstrip()

        func_prototype = func_usage.split("=")[-1]
        func_prototype.replace("function ", "")

        with open(out_fn, "w") as f:
            f.write(funcname + "\n")
            f.write("=" * len(funcname) + "\n")
            f.write("```{function} %s\n```\n" % func_prototype)
            f.write("Full definition:\n")
            f.write("```{code-block} matlab\n")
            f.write(func_usage)
            f.write("\n```\n")
            f.write(rest)

        count += 1

    if count == 0:
        print("No input files found!")
        print('This script must be executed from "openEMS-Project/doc-src/octave" ')
        print('and the directory "openEMS-Project/%s/matlab/" must be non-empty!' % subproject)
        exit(1)


if __name__ == "__main__":
    generate_doc("CSXCAD")
    generate_doc("openEMS")
